"use strict";(self.webpackChunkjotai_advanced_forms_docs=self.webpackChunkjotai_advanced_forms_docs||[]).push([[624],{655:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>t,default:()=>m,frontMatter:()=>r,metadata:()=>s,toc:()=>a});const s=JSON.parse('{"id":"api","title":"API Reference","description":"createForm()","source":"@site/docs/api.md","sourceDirName":".","slug":"/api","permalink":"/jotai-advanced-forms/docs/api","draft":false,"unlisted":false,"editUrl":"https://github.com/omnidan/jotai-advanced-forms/tree/main/docs/docs/api.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"api","sidebar_position":3,"title":"API Reference"},"sidebar":"docs","previous":{"title":"Getting Started","permalink":"/jotai-advanced-forms/docs/getting-started"},"next":{"title":"Examples","permalink":"/jotai-advanced-forms/docs/examples"}}');var l=n(3420),o=n(8906);const r={id:"api",sidebar_position:3,title:"API Reference"},t="API Reference",d={},a=[{value:"<code>createForm()</code>",id:"createform",level:2},{value:"Returns",id:"returns",level:3},{value:"Field Atoms",id:"field-atoms",level:2},{value:"<code>formFieldAtom(options)</code>",id:"formfieldatomoptions",level:3},{value:"Options",id:"options",level:4},{value:"<code>formFieldAtomFamily(options, areEqual?)</code>",id:"formfieldatomfamilyoptions-areequal",level:3},{value:"Options",id:"options-1",level:4},{value:"<code>multiFormField(options, areEqual?)</code>",id:"multiformfieldoptions-areequal",level:3},{value:"Returns",id:"returns-1",level:4},{value:"Form State",id:"form-state",level:2},{value:"<code>formAtom</code>",id:"formatom",level:3},{value:"<code>useForm(options)</code>",id:"useformoptions",level:3},{value:"Options",id:"options-2",level:4},{value:"Returns",id:"returns-2",level:4},{value:"Resetting Form Fields",id:"resetting-form-fields",level:2},{value:"Resetting the Entire Form",id:"resetting-the-entire-form",level:3},{value:"Resetting Individual Fields",id:"resetting-individual-fields",level:3},{value:"Types",id:"types",level:2}];function c(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(i.header,{children:(0,l.jsx)(i.h1,{id:"api-reference",children:"API Reference"})}),"\n",(0,l.jsx)(i.h2,{id:"createform",children:(0,l.jsx)(i.code,{children:"createForm()"})}),"\n",(0,l.jsx)(i.p,{children:"Creates a new form instance. Returns an object with methods and atoms for managing form state."}),"\n",(0,l.jsx)(i.h3,{id:"returns",children:"Returns"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"formFieldAtom(options)"})," \u2013 Create a single form field atom."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"formFieldAtomFamily(options, areEqual?)"})," \u2013 Create a family of form field atoms (for dynamic fields)."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"multiFormField(options, areEqual?)"})," \u2013 Create and manage dynamic arrays of fields."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"formAtom"})," \u2013 Atom representing the overall form state."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"useForm(options)"})," \u2013 React hook for handling form submission and validation."]}),"\n"]}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h2,{id:"field-atoms",children:"Field Atoms"}),"\n",(0,l.jsx)(i.h3,{id:"formfieldatomoptions",children:(0,l.jsx)(i.code,{children:"formFieldAtom(options)"})}),"\n",(0,l.jsx)(i.p,{children:"Creates a form field atom with validation and error state."}),"\n",(0,l.jsx)(i.h4,{id:"options",children:"Options"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"initialState"})," \u2013 Initial value of the field."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"validate"})," \u2013 Optional validation function."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"debugLabel"})," \u2013 Optional label for debugging."]}),"\n"]}),"\n",(0,l.jsx)(i.h3,{id:"formfieldatomfamilyoptions-areequal",children:(0,l.jsx)(i.code,{children:"formFieldAtomFamily(options, areEqual?)"})}),"\n",(0,l.jsx)(i.p,{children:"Creates a family of form field atoms for dynamic fields (e.g., arrays)."}),"\n",(0,l.jsx)(i.h4,{id:"options-1",children:"Options"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"initialState"})," \u2013 Initial value for each field."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"validate(param)"})," \u2013 Returns a validation function for each param."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"debugLabel"})," \u2013 Optional label for debugging."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"areEqual"})," \u2013 Optional function to compare params."]}),"\n"]}),"\n",(0,l.jsx)(i.h3,{id:"multiformfieldoptions-areequal",children:(0,l.jsx)(i.code,{children:"multiFormField(options, areEqual?)"})}),"\n",(0,l.jsx)(i.p,{children:"Creates a dynamic array of fields (e.g., for multiple emails)."}),"\n",(0,l.jsx)(i.h4,{id:"returns-1",children:"Returns"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"atomFamily"})," \u2013 The atom family for the fields."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"idCounterAtom"})," \u2013 Atom for generating unique IDs."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"usedIdsAtom"})," \u2013 Atom for tracking used IDs."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"valuesAtom"})," \u2013 Atom for the array of field values."]}),"\n"]}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h2,{id:"form-state",children:"Form State"}),"\n",(0,l.jsx)(i.h3,{id:"formatom",children:(0,l.jsx)(i.code,{children:"formAtom"})}),"\n",(0,l.jsx)(i.p,{children:"Atom representing the form's state, including validity and error focus management."}),"\n",(0,l.jsx)(i.h3,{id:"useformoptions",children:(0,l.jsx)(i.code,{children:"useForm(options)"})}),"\n",(0,l.jsx)(i.p,{children:"React hook for handling form submission, validation, and form reset."}),"\n",(0,l.jsx)(i.h4,{id:"options-2",children:"Options"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"onValid"})," \u2013 Called when the form is valid."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"onError"})," \u2013 Called when the form is invalid."]}),"\n"]}),"\n",(0,l.jsx)(i.h4,{id:"returns-2",children:"Returns"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"submitForm()"})," \u2013 Triggers form validation and submission."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"isSubmitting"})," \u2013 Boolean indicating if the form is submitting."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"resetValidation()"})," \u2013 Resets the form's validation state (clears error display)."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"resetForm()"})," \u2013 Resets all form fields to their initial values and clears validation state."]}),"\n"]}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h2,{id:"resetting-form-fields",children:"Resetting Form Fields"}),"\n",(0,l.jsx)(i.h3,{id:"resetting-the-entire-form",children:"Resetting the Entire Form"}),"\n",(0,l.jsxs)(i.p,{children:["Use the ",(0,l.jsx)(i.code,{children:"resetForm()"})," function returned from ",(0,l.jsx)(i.code,{children:"useForm()"})," to reset all fields in the form to their initial values:"]}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-tsx",children:'const { resetForm } = useForm({\n  onValid: () => console.log("Form submitted!"),\n});\n\n// Reset all fields to their initial values\nresetForm();\n'})}),"\n",(0,l.jsx)(i.p,{children:"This will:"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:["Reset all form field values to their ",(0,l.jsx)(i.code,{children:"initialState"})]}),"\n",(0,l.jsxs)(i.li,{children:["Reset all ",(0,l.jsx)(i.code,{children:"isDirty"})," flags to ",(0,l.jsx)(i.code,{children:"false"})]}),"\n",(0,l.jsxs)(i.li,{children:["Clear validation errors (reset ",(0,l.jsx)(i.code,{children:"submitted"})," state)"]}),"\n"]}),"\n",(0,l.jsx)(i.h3,{id:"resetting-individual-fields",children:"Resetting Individual Fields"}),"\n",(0,l.jsxs)(i.p,{children:["Form field atoms are created with Jotai's ",(0,l.jsx)(i.code,{children:"atomWithReset"}),", which means you can reset individual fields using Jotai's ",(0,l.jsx)(i.code,{children:"useResetAtom"})," hook:"]}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-tsx",children:'import { useResetAtom } from "jotai/utils";\n\nconst { formFieldAtom } = createForm();\nconst emailField = formFieldAtom({ initialState: "" });\n\nfunction MyComponent() {\n  const [email, setEmail] = useAtom(emailField);\n  const resetEmail = useResetAtom(emailField);\n\n  return (\n    <div>\n      <input value={email.value} onChange={(e) => setEmail(e.target.value)} />\n      <button onClick={resetEmail}>Reset Email</button>\n    </div>\n  );\n}\n'})}),"\n",(0,l.jsx)(i.p,{children:"This allows fine-grained control over which fields to reset without affecting the entire form."}),"\n",(0,l.jsx)(i.hr,{}),"\n",(0,l.jsx)(i.h2,{id:"types",children:"Types"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"FormField<TValue, TErrorMessageKeys, TRef>"})," \u2013 State for a single field."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"Form"})," \u2013 State for the whole form."]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"FormFieldAtom"}),", ",(0,l.jsx)(i.code,{children:"FormFieldAtomFamily"}),", ",(0,l.jsx)(i.code,{children:"MultiFormField"})," \u2013 Atom types for fields."]}),"\n"]}),"\n",(0,l.jsxs)(i.p,{children:["See the ",(0,l.jsx)(i.a,{href:"https://github.com/omnidan/jotai-advanced-forms/blob/main/src/form.ts",children:"source code"})," for full type definitions."]})]})}function m(e={}){const{wrapper:i}={...(0,o.R)(),...e.components};return i?(0,l.jsx)(i,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},8906:(e,i,n)=>{n.d(i,{R:()=>r,x:()=>t});var s=n(6672);const l={},o=s.createContext(l);function r(e){const i=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function t(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:r(e.components),s.createElement(o.Provider,{value:i},e.children)}}}]);